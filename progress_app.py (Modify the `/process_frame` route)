from flask import Flask, render_template, jsonify, request, send_from_directory
import json
import os
from visualize import visualize_fits
import logging

app = Flask(__name__, template_folder='templates')

progress_file = 'progress.json'
frames_directory = os.path.join('NEOSSAT_Data', 'static', 'frames')

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/progress')
def progress():
    if os.path.exists(progress_file):
        with open(progress_file, 'r') as f:
            data = json.load(f)
        return jsonify(data)
    else:
        return jsonify({"message": "No progress data available."})

@app.route('/process_frame', methods=['POST'])
def process_frame():
    data = request.get_json()
    if not data:
        return jsonify({"error": "No data provided."}), 400
    
    filename = data.get('filename')
    parameters = data.get('parameters', {})
    
    if not filename:
        return jsonify({"error": "Filename not provided."}), 400
    
    fits_file_path = os.path.join('NEOSSAT_Data', filename)
    if not os.path.exists(fits_file_path):
        return jsonify({"error": f"File {filename} does not exist."}), 404
    
    # Get adjustable parameters with defaults
    threshold_percentile = parameters.get('threshold_percentile', 99)
    
    # Extract additional parameters
    kernel_size = parameters.get('kernel_size', 5)
    sigma = parameters.get('sigma', 1)
    
    # Define the path for the modified frame
    frame_number = filename.split('_')[-1].split('.')[0]  # Extract frame number from filename
    modified_filename = f'modified_frame_{frame_number}_kp{kernel_size}_sigma{sigma}.png'
    fig_path = os.path.join(frames_directory, modified_filename)
    
    try:
        # Process the FITS file with new parameters and save the modified frame
        visualize_fits(
            fits_file_path, 
            save_fig=True, 
            fig_path=fig_path,
            threshold_percentile=threshold_percentile,
            kernel_size=kernel_size,
            sigma=sigma
        )
        logging.info(f"Processed frame {filename} with parameters {parameters}")
        return jsonify({"modified_frame": f'/static/frames/{modified_filename}'}), 200
    except Exception as e:
        logging.error(f"Error processing frame {filename}: {e}")
        return jsonify({"error": f"Failed to process frame {filename}: {str(e)}"}), 500

@app.route('/static/frames/<path:filename>')
def serve_frame(filename):
    return send_from_directory(frames_directory, filename)

if __name__ == '__main__':
    # Configure logging for Flask app
    logging.basicConfig(level=logging.INFO)
    app.run(debug=True)